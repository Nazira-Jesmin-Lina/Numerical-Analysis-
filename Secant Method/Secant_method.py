# -*- coding: utf-8 -*-
"""lab 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nmEtD0Unm35gC6UZjMd9093t0Sh8z9Du
"""

import matplotlib.pyplot as plt
import numpy as np


def value_of_fxx(x):
    return 3*x**2-1

def value_of_fx(x):
    return x**3-x-1


print("                     Secant Method                   ")
print(" ")


iter_nmbr=[]
approximation_err=[]
rel_apprx=[]
x0=50
x1=48
i=0
x2=999999999
while abs(value_of_fx(x2))>= 10 ** -6:
    x2=(x0*value_of_fx(x1))-(x1*value_of_fx(x0))
    x2=x2/(value_of_fx(x1)-value_of_fx(x0))
    apprxmtn=abs(x2-x1)
    rel_apprxmtn=(apprxmtn*100)/x2
    print(f" Xi-1 : {x0:10.6f}  |  f(xi-1) :{value_of_fx(x0):15.6f} | f'(x-1):{value_of_fxx(x1):15.6f} |  xi+1:{x2:15.6f} | Approximation Error:{apprxmtn:15.6f} | Relative Approximation Error:{rel_apprxmtn:10.4f}%    ")
    i=i+1
    iter_nmbr.append(i)
    approximation_err.append(apprxmtn)
    rel_apprx.append(rel_apprxmtn)
    x0=x1
    x1=x2


print("")
iter_nmbr_new=[]
approximation_err_new=[]
rel_apprx_neew=[]
x=50
i=0
print("                     Newton Raphson Method                   ")
print(" ")
while abs(value_of_fx(x))>= 10 ** -6:

    xi=x-(value_of_fx(x)/value_of_fxx(x))
    apprxmtn=abs(xi-x)
    rel_apprxmtn=(apprxmtn*100)/xi
    print(f" Xi-1 : {xi:10.6f}  |  f(xi-1) :{value_of_fx(x):15.6f} | f'(x-1):{value_of_fxx(x):15.6f} |  xi+1:{xi:15.6f} | Approximation Error:{apprxmtn:15.6f} | Relative Approximation Error:{rel_apprxmtn:10.4f}%    ")
    x=xi
    i=i+1
    iter_nmbr_new.append(i)
    approximation_err_new.append(apprxmtn)
    rel_apprx_neew.append(rel_apprxmtn)


print("")
x = np.array(iter_nmbr)
y = np.array(approximation_err)

plt.bar(x,y,label="secant method")
plt.xlabel("Iteration Number")
plt.ylabel("Approximation error")
plt.title("Secant Method Approximaation error vs Iteration Number")
plt.show()

y=np.array(rel_apprx)
plt.bar(x,y,label="secant method")
plt.xlabel("Iteration Number")
plt.ylabel("Relative Approximation error")
plt.title("Secant Method Relative Approximaation error vs Iteration Number")
plt.show()

y = np.array(approximation_err)
x_new = np.array(iter_nmbr_new)
y_new = np.array(approximation_err_new)

plt.plot(x,y,label="Secant Method")
plt.plot(x_new,y_new,label="Newton Raphson")
plt.xlabel("Iteration Number")
plt.ylabel("Approximation error")
plt.title("Secant Method vs Newton Raphson Method")
plt.legend()
plt.show()

y = np.array(rel_apprx)
y_new = np.array(rel_apprx_neew)

plt.plot(x,y,label="Secant Method")
plt.plot(x_new,y_new,label="Newton Raphson")
plt.xlabel("Iteration Number")
plt.ylabel("Relative Approximation error")
plt.title("Secant Method vs Newton Raphson Method")
plt.legend()
plt.show()